name: main

on: ['push', 'pull_request']

jobs:
  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        VALIDATE_MARKDOWN: true
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LINTER_RULES_PATH: /
        MARKDOWN_CONFIG_FILE: .markdownlint.yml


  golang-lint:
    name: Golang Lint
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache: false
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        # Require: The version of golangci-lint to use.
        # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
        # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
        version: latest

        # Optional: working directory, useful for monorepos
        # working-directory: somedir

        # Optional: golangci-lint command line arguments.
        #
        # Note: By default, the `.golangci.yml` file should be at the root of the repository.
        # The location of the configuration file can be changed by using `--config=`
        # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0
        args: --timeout=30m

        # Optional: show only new issues if it's a pull request. The default value is `false`.
        # only-new-issues: true

        # Optional: if set to true, then all caching functionality will be completely disabled,
        #           takes precedence over all other caching options.
        # skip-cache: true

        # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
        # skip-pkg-cache: true

        # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
        # skip-build-cache: true

        # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
        # install-mode: "goinstall"


  golang-test:
    name: Golang Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        go-version: ['1.22']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/checkout@v4
    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    - name: Display Go version
      run: go version
    - name: Install dependencies
      run: go get ./...
    - name: Test with Go
      run: make test



  chainsaw-test:
    name: Chainsaw Test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        k8s-version: ['1.26.14', '1.27.11']
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache: false
    - name: Create KinD cluster
      env:
        KINDTEST_K8S_VERSION: ${{ matrix.k8s-version}}
        KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
        KIND_KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
      run: make kind-create
    - name: Chainsaw test setup
      env:
        KINDTEST_K8S_VERSION: ${{ matrix.k8s-version }}
        KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
        KIND_KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
      run: make chainsaw-setup
    - name: Test with Chainsaw
      env:
        KINDTEST_K8S_VERSION: ${{ matrix.k8s-version }}
        KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
        KIND_KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
      run: make chainsaw-test


  deploy-operator:
    name: Deploy operator
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_owner == 'zncdatadev' }}
    runs-on: ubuntu-22.04
    needs:
    - golang-lint
    - golang-test
    - chainsaw-test
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    - name: Login to quay.io
      uses: docker/login-action@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}
    - name: Build and push operator
      run: |
        make docker-buildx
    - name: Build and push operator bundle
      run: |
        make bundle
        make bundle-buildx
    - name: Build and push catalog
      run: |
        make catalog
        make catalog-buildx
