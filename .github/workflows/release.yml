name: Release

on:
  push:
    tags:
      - '*'


env:
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || '0.0.0-dev' }}


jobs:
  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Run markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v20
        with:
          globs: |
            README.*.md
            docs/*.md


  golang-lint:
    name: golang-lint
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v8


  golang-test:
    name: Golang Test
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Running Tests
        run: |
          go mod tidy
          make test


  chainsaw-test:
    name: Chainsaw Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s-version: [
          '1.26.15',
          '1.27.16',
          '1.28.15',
          '1.29.12',
          '1.30.8',
          '1.31.4',
          '1.32.0'
        ]
        product-version: ['3.1.3', '4.0.1']
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Create KinD cluster
        env:
          KIND_K8S_VERSION: ${{ matrix.k8s-version}}
          KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
        run: make kind-create

      - name: Chainsaw test setup
        env:
          KIND_K8S_VERSION: ${{ matrix.k8s-version }}
          KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
        run: make chainsaw-setup

      - name: Test with Chainsaw
        env:
          KIND_K8S_VERSION: ${{ matrix.k8s-version }}
          KUBECONFIG: kind-kubeconfig-${{ matrix.k8s-version }}
          PRODUCT_VERSION: ${{ matrix.product-version }}
        run: make chainsaw-test


  release-image:
    name: Release Image
    if: ${{ github.repository_owner == 'zncdatadev' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # required for OIDC for cosign to automatically use
    needs:
      - markdown-lint
      - golang-lint
      - golang-test
      - chainsaw-test
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Cosign
        uses: sigstore/cosign-installer@main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and push operator
        run: |
          make docker-buildx

      - name: Sign operator image
        uses: ./.github/actions/sign-image

  chart-linter-artifacthub:
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/artifacthub/ah:v1.14.0
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Run ah lint
        working-directory: deploy/helm
        run: ah lint

  chart-lint-test:
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/artifacthub/ah:v1.14.0
      options: --user 1001
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run ah lint
        working-directory: ./charts
        run: ah lint

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          check-latest: true

      - name: Fetch all tags
        run: git fetch --tags --force

      - name: Get commit range
        id: commit-range
        run: |
          # Get current and previous tag
          CURRENT_TAG="${{ github.ref_name }}"
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -A1 "^${CURRENT_TAG}$" | tail -n1)

          # First release detection
          if [[ "$PREVIOUS_TAG" == "$CURRENT_TAG" || -z "$PREVIOUS_TAG" ]]; then
            echo "First release detected - marking all charts as changed"
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "target_branch=main" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Get previous tag commit
          PREVIOUS_COMMIT=$(git rev-list -n 1 "$PREVIOUS_TAG")
          echo "Current commit for previous tag ($PREVIOUS_TAG): $PREVIOUS_COMMIT"

          # Get the branch name(s) of the previous commit, prefer release branches, then main, then others
          PREVIOUS_BRANCHES=$(git branch -r --contains "$PREVIOUS_COMMIT" | sed 's/^[ *]*//')
          echo "Found branches containing the previous commit: $PREVIOUS_BRANCHES"

          # Define branch priority: release branches (sorted), then main, then others
          PRIORITY_BRANCH=""
          # 1. Find release branches (sorted lexicographically)
          RELEASE_BRANCH=$(echo "$PREVIOUS_BRANCHES" | grep -E 'origin/release' | sort | head -n1)
          if [[ -n "$RELEASE_BRANCH" ]]; then
            PRIORITY_BRANCH="$RELEASE_BRANCH"
          else
            # 2. Fallback to main
            MAIN_BRANCH=$(echo "$PREVIOUS_BRANCHES" | grep -E '^origin/main$')
            if [[ -n "$MAIN_BRANCH" ]]; then
              PRIORITY_BRANCH="$MAIN_BRANCH"
            else
              # 3. Fallback to the first other branch
              PRIORITY_BRANCH=$(echo "$PREVIOUS_BRANCHES" | head -n1)
            fi
          fi

          echo "Removing 'origin/' from branches"
          PRIORITY_BRANCH=$(echo "$PRIORITY_BRANCH" | sed 's|^origin/||')
          echo "Selected target branch for comparison: $PRIORITY_BRANCH"

          echo "target_branch=$PRIORITY_BRANCH" >> "$GITHUB_OUTPUT"
          echo "since_commit=$PREVIOUS_COMMIT" >> "$GITHUB_OUTPUT"

      - name: Check chart changes
        id: check-changes
        run: |
          # Check for changes in chart directory using both --since and --target-branch parameters
          if ! changed=$(ct list-changed \
            --chart-dirs deploy/helm \
            --since "${{ steps.commit-range.outputs.since_commit }}" \
            --target-branch "${{ steps.commit-range.outputs.target_branch }}"); then
            echo "Failed to check for changes"
            exit 1
          fi

          if [[ -n "$changed" ]]; then
            echo "Changed charts detected: $changed"
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "No chart changes detected"
          fi

      - name: Run chart-testing (lint)
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          ct lint \
            --since "${{ steps.commit-range.outputs.since_commit }}" \
            --target-branch "${{ steps.commit-range.outputs.target_branch }}" \
            --config ./.github/configs/ct-lint.yaml

      - name: Create kind cluster
        if: steps.check-changes.outputs.changed == 'true'
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: kind  # Default cluster name is 'chart-testing'

      - name: Load images to cluster
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          make docker-build
          kind load docker-image quay.io/zncdatadev/hive-operator:${{ env.VERSION }}

      - name: Run chart-testing (install)
        id: ct-test
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          ct install \
            --since "${{ steps.commit-range.outputs.since_commit }}" \
            --target-branch "${{ steps.commit-range.outputs.target_branch }}" \
            --config ./.github/configs/ct-install.yaml
          # Save success result to github output
          if [[ $? -eq 0 ]]; then
            echo "ct_tested=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run e2e with chart
        if: steps.ct-test.outputs.ct_tested == 'true'
        run: |
          # Add kubedoop helm repo
          helm repo add kubedoop https://zncdatadev.github.io/kubedoop-helm-charts/

          HELM_DEPENDENCIES=(
            commons-operator
            listener-operator
            secret-operator
          )

          # Install dependencies
          for dep in "${HELM_DEPENDENCIES[@]}"; do
            helm upgrade --install --create-namespace --namespace kubedoop-operators --wait $dep kubedoop/$dep
          done

          # Install hive-operator chart
          helm install --create-namespace --namespace hive-operators --wait hive-operator ./deploy/helm/hive-operator

          # E2E tests
          make chainsaw
          ./bin/chainsaw test --test-dir ./test/e2e/

  release-chart:
    name: Release Chart
    if: ${{ github.repository_owner == 'zncdatadev' }}
    runs-on: ubuntu-latest
    needs:
      - chart-linter-artifacthub
      - chart-lint-test
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Login to quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_CHART_USERNAME }}
          password: ${{ secrets.QUAY_CHART_PASSWORD }}

      - name: Build and push oci chart
        run: |
          make chart-publish

      - name: Clone helm charts repository
        uses: actions/checkout@v4
        with:
          repository: zncdatadev/kubedoop-helm-charts
          ref: gh-pages
          # Use PAT for authentication, must be a repo content rw scope token
          # Subsequent commits to the repository require read and write permissions
          token: ${{ secrets.HELM_CHARTS_REPO_TOKEN }}
          path: kubedoop-helm-charts

      - name: Update helm charts index
        run: |
          OCI_REGISTRY="oci://quay.io/kubedoopcharts"

          # Ensure chart index.yaml exists
          if [ ! -f kubedoop-helm-charts/index.yaml ]; then
            echo "index.yaml not found"
            exit 1
          fi

          # Get chart package file from the target directory, ensuring exactly one exists
          CHART_PACKAGES=$(ls target/charts/*.tgz)
          if [ $(echo "$CHART_PACKAGES" | wc -l) -ne 1 ]; then
            echo "Expected exactly one chart package, found: $CHART_PACKAGES"
            exit 1
          fi
          CHART_PACKAGE=$(basename $CHART_PACKAGES)

          # Extract chart name and version from package filename
          # Examples:
          # foo-0.0.0-dev.tgz -> CHART_NAME=foo, CHART_VERSION=0.0.0-dev
          # foo-12.0.1.tgz -> CHART_NAME=foo, CHART_VERSION=12.0.1
          # my-chart-2-operator-1.0.0.tgz -> CHART_NAME=my-chart-2-operator, CHART_VERSION=1.0.0
          # Strategy: Find the last occurrence of -[digit] pattern, that's where version starts
          CHART_NAME=$(echo $CHART_PACKAGE | sed 's/-[0-9]\+\..*\.tgz$//')
          CHART_VERSION=$(echo $CHART_PACKAGE | sed "s/^$CHART_NAME-\(.*\)\.tgz$/\1/")

          # Validate extracted CHART_NAME and CHART_VERSION
          if [ -z "$CHART_NAME" ] || [ -z "$CHART_VERSION" ]; then
            echo "Failed to extract CHART_NAME or CHART_VERSION from package filename: $CHART_PACKAGE"
            exit 1
          fi

          # Regenerate the index.yaml file for the helm charts repository
          helm repo index --url $OCI_REGISTRY --merge kubedoop-helm-charts/index.yaml target/charts
          # Replace .tgz in URL with OCI tag (remove .tgz suffix)
          sed -i "s|$OCI_REGISTRY/$CHART_PACKAGE|$OCI_REGISTRY/$CHART_NAME:$CHART_VERSION|" target/charts/index.yaml

          # Copy the updated index.yaml to the kubedoop-helm-charts directory
          cp target/charts/index.yaml kubedoop-helm-charts/index.yaml

          # Push index.yaml to the kubedoop-helm-charts repository
          cd kubedoop-helm-charts
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add index.yaml
          # Only commit and push if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "Update index"
            git push origin gh-pages
          else
            echo "No changes to commit."
          fi
